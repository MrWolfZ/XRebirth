<?xml version="1.0" encoding="iso-8859-1" ?>
<!-- 
	This file is part of the X Rebirth UFO mod.
	
	Author: MadJoker
  
  Last Change:
	Version: V0.4.3 Beta
	Date: 25th Dec 2013
  
  X Rebirth version: 1.21
-->

<!--
  This script should only be run on entities of type commander that 
  are currently piloting a ship of size l or larger.
  
  Makes the commander fly to a zone and attack all targets.
-->
<aiscript name="ufo.move.capital.attack.zone" version="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../Resources/aiscripts.xsd">
  <params>
    <!-- The zone to attack -->
    <param name="oAttackDestination" />
    <!-- Optional position offset inside the zone -->
    <param name="pPosition" default="position.[0,0,0]" />
    <!-- Should we move in aggressive or defensive (engage if attacked) mode? -->
    <param name="sMoveMode" default="'defensive'" />
    <!-- At what distance are we engaging the enemy if aggressive? -->
    <param name="mEngageDist" default="4km" />
    <!-- At what additional distance are we engaging capital ships? -->
    <param name="mCapShipOffset" default="3.5km" />
    <!-- The factor we multiply the allowed distance by if an enemy was reported by fleet command -->
    <param name="fReportLenienceFactor" default="2f" />
    <!-- Should we print debug output? -->
    <param name="iDebugLevel" default="0" />
  </params>
  <interrupts>
    <!-- Handler used to update the parameters under which this entity works -->
    <handler>
      <!-- 
        For parameter change we signal the ship. The parameters look like this (uniform
        for all entity types):
        event.param3 = [$oTarget,$bEscort,$sEscortMode,$sFollowMode,$sStance,$mEngageDist,$iDebugLevel]
      -->
      <conditions>
        <event_object_signalled object="this.ship" param="'UFO_ParamChange'" param2="this" />
      </conditions>
      <actions>
        <debug_text text="'[%1 - %2 - %3 %4] Received updated parameters: %5...'.[player.age,this.ship.knownname,this.typename,this.knownname,event.param3]" filter="error" chance="100 * ($iDebugLevel ge 1)" />

        <set_value name="$sMoveMode" exact="event.param3.{5}" />
        <set_value name="$mEngageDist" exact="event.param3.{6}" />
        <set_value name="$iDebugLevel" exact="event.param3.{7}" />

        <!-- In case we are currently in combat, we need to signal ourselves again -->
        <signal_objects object="this.ship" param="'UFO_AbortCombat'" param2="this" />

        <!-- We also need to update the stored state -->
        <set_value name="this.$sUFO_MoveMode" exact="$sMoveMode" />
        <set_value name="this.$mUFO_EngageDist" exact="$mEngageDist" />
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_command command="command.attackenemies" />
  </init>
  <attention min="unknown">
    <actions>
      <run_script name="'mj.lib.log'" sinceversion="1">
        <param name="iDebugLevel" value="$iDebugLevel" />
        <save_retval name="sLogFormat" variable="$sLogFormat" />
        <save_retval name="iLogError" variable="$iLogError" />
        <save_retval name="iLogInfo" variable="$iLogInfo" />
        <save_retval name="iLogFine" variable="$iLogFine" />
        <save_retval name="iLogFinest" variable="$iLogFinest" />
      </run_script>

      <!-- First, we do some parameter sanity checking -->
      <do_if value="this.type != entitytype.commander or not [class.ship_l,class.ship_xl].indexof.{this.ship.class}">
        <debug_text filter="error" text="'[%1 - %2 - %3 %4] This script should only be run on entities of type commander that are currently piloting a ship of size l or larger'.[player.age,this.ship.knownname,this.typename,this.knownname]" />
        <return />
      </do_if>
      <do_if value="not this.$gUFO_Follow? and (@this.$gUFO_Follow.count gt 0 or @this.$gUFO_CapFollow.count gt 0)">
        <debug_text filter="error" text="'[%1 - %2 - %3 %4] This script should only be run entities that are commanding a fleet.'.[player.age,this.ship.knownname,this.typename,this.knownname]" />
        <return />
      </do_if>
      <do_if value="not $oAttackDestination.isclass.zone">
        <debug_text filter="error" text="'[%1 - %2 - %3 %4] This script can only be used to make a fleet commander attack a zone.'.[player.age,this.ship.knownname,this.typename,this.knownname]" />
        <return />
      </do_if>

      <!-- Then, we initialize our UFO state container -->
      <do_if value="not this.$UFO?">
        <debug_text text="$sLogFormat.[player.age,'Initializing UFO state container...']" filter="error" chance="$iLogInfo" />
        <run_script name="'mj.lib.create.dict'" result="$UFO" />
        <set_value name="this.$UFO" exact="$UFO" />
        <set_value name="this.$UFO.$iUseCount" exact="0" />
      </do_if>

      <!-- We register this script for the users of the UFO state container -->
      <set_value name="this.$UFO.$iUseCount" exact="this.$UFO.$iUseCount + 1" />

      <!-- We store some state on the entity so that we can query it -->
      <set_value name="this.$UFO.$oCommander" exact="this" />
      <set_value name="this.$oUFO_AttackDestination" exact="$oAttackDestination" />
      <set_value name="this.$sUFO_MoveMode" exact="$sMoveMode" />
      <set_value name="this.$mUFO_EngageDist" exact="$mEngageDist" />

      <!-- This label is used only for save-restore and interrupt-resume -->
      <label name="start" />

      <debug_text text="'[%1 - %2 - %3 %4] Started attack run on zone %5...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />

      <!-- Setting up some variables -->
      <set_value name="$bReactToAttack" exact="false" />
      <set_value name="$iInSectorJumpFailCount" exact="0" />

      <!-- Use while loop since goto is evil -->
      <do_while value="true">
        <!-- undock in case we were docked -->
        <run_script name="'move.undock'" />

        <!-- If we are in different sectors, we use the default jump logic -->
        <do_if value="this.ship.sector != $oAttackDestination.sector">
          <debug_text text="'[%1 - %2 - %3 %4] Destination %5 is in different sector. Jumping to sector %6...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname,$oAttackDestination.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
          <run_script name="'move.jump'" result="$bJumpSuccessful">
            <param name="destination" value="$oAttackDestination" />
            <param name="ignorefuel" value="true" />
            <param name="debugchance" value="100 * ($iDebugLevel ge 1)" />
          </run_script>
          <do_if value="$bJumpSuccessful">
            <debug_text text="'[%1 - %2 - %3 %4] Successfully jumped to sector %5...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.sector.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
          </do_if>
          <do_else>
            <debug_text text="'[%1 - %2 - %3 %4] Jump to sector %5 unsuccessful. Trying again...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.sector.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
            <wait exact="5s" sinceversion="1" />
          </do_else>
        </do_if>

        <!-- If our piloting skill is very high, we can make in-sector jumps, unless we failed too often -->
        <do_elseif value="this.ship.sector == $oAttackDestination.sector and this.ship.zone != $oAttackDestination and this.skill.navigation ge 5 and $iInSectorJumpFailCount lt 3">
          <debug_text text="'[%1 - %2 - %3 %4] Destination %5 is another zone in our sector. Since I am highly skilled, we do an in-sector jump...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />

          <!-- Jump to target zone, using no fuel -->
          <run_script name="'move.jump'" result="$bJumpSuccessful">
            <param name="destination" value="$oAttackDestination" />
            <param name="position" value="$pPosition" />
            <param name="ignorefuel" value="true" />
            <param name="forcejump" value="true" />
            <param name="nonstop" value="true" />
            <param name="autorefuel" value="false" />
            <param name="debugchance" value="100 * ($iDebugLevel ge 1)" />
          </run_script>
          <do_if value="$bJumpSuccessful">
            <debug_text text="'[%1 - %2 - %3 %4] Successfully jumped to zone %5...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
          </do_if>
          <do_else>
            <set_value name="$iInSectorJumpFailCount" operation="add" />
            <do_if value="$iInSectorJumpFailCount ge 3">
              <debug_text text="'[%1 - %2 - %3 %4] Jump to zone %5 unsuccessful for third time. Boosting to it...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
            </do_if>
            <do_else>
              <debug_text text="'[%1 - %2 - %3 %4] Jump to zone %5 unsuccessful. Trying again...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
              <wait exact="5s" sinceversion="1" />
            </do_else>
          </do_else>
        </do_elseif>

        <!-- otherwise, we make a boost trip to our target -->
        <do_else>
          <set_value name="$iInSectorJumpFailCount" exact="0" />

          <debug_text text="'[%1 - %2 - %3 %4] Flying to attack destination %5...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />

          <set_value name="$mDist" exact="this.ship.distanceto.{$oAttackDestination}" />
          <!-- Use boost only for large distances -->
          <do_if value="$mDist ge 20km">
            <debug_text text="'[%1 - %2 - %3 %4] Attack destination %5 is far away (%6m). Boosting to it...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname,$mDist]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
            <start_boost object="this.ship" />
          </do_if>
          <do_while value="true">
            <set_value name="$mDist" exact="this.ship.distanceto.{$oAttackDestination}" />
            <set_value name="$bWasFarAway" exact="$mDist ge 20km" />
            
            <!-- Move to our destination. -->
            <move_to object="this.ship" destination="$oAttackDestination" usehighways="false" forceposition="false" forcesteering="false" sinceversion="1">
              <position value="$pPosition" />
              <interrupt>
                <conditions>
                  <check_any>
                    <event_object_attacked object="this.ship" />
                    <event_object_attacked group="this.$gUFO_Follow " />
                    <event_object_attacked group="this.$gUFO_CapFollow " />
                    <event_object_destroyed group="this.$gUFO_Follow" />
                    <event_object_destroyed group="this.$gUFO_CapFollow" />
                    <event_object_enemy_found object="this.ship" />
                    <!-- We also interrupt on a parameter change -->
                    <event_object_signalled object="this.ship" param="'UFO_ParamChange'" param2="this" />
                  </check_any>
                </conditions>
                <actions>
                  <do_if value="['event_object_attacked','event_object_destroyed'].indexof.{event.name}">
                    <debug_text text="'[%1 - %2 - %3 %4] One of our protection targets was attacked. Checking gravidar depending on mode: %5...'.[player.age,this.ship.knownname,this.typename,this.knownname,$sMoveMode]" filter="error" chance="100 * ($iDebugLevel ge 2)" />
                    <set_value name="$bReactToAttack" exact="$sMoveMode == 'defensive'" />
                  </do_if>
                </actions>
              </interrupt>
              <!-- We also interrupt after some time for a distance check -->
              <interrupt_after_time time="10s - (0.5s * (this.skill.navigation + this.skill.combat))" />
            </move_to>

            <!-- If we have arrived at our destination, we sleep and regularly check for enemies -->
            <do_if value="this.ship.speed == 0">
              <debug_text text="'[%1 - %2 - %3 %4] At attack destination %5. Sleeping...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
              <wait exact="10s - (0.5s * (this.skill.navigation + this.skill.combat))" sinceversion="1">
                <interrupt>
                  <conditions>
                    <check_any>
                      <event_object_attacked object="this.ship" />
                      <event_object_attacked group="this.$gUFO_Follow " />
                      <event_object_attacked group="this.$gUFO_CapFollow " />
                      <event_object_destroyed group="this.$gUFO_Follow" />
                      <event_object_destroyed group="this.$gUFO_CapFollow" />
                      <event_object_enemy_found object="this.ship" />
                      <!-- We also interrupt on a parameter change -->
                      <event_object_signalled object="this.ship" param="'UFO_ParamChange'" param2="this" />
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="['event_object_attacked','event_object_destroyed'].indexof.{event.name}">
                      <debug_text text="'[%1 - %2 - %3 %4] One of our protection targets was attacked. Checking gravidar depending on mode: %5...'.[player.age,this.ship.knownname,this.typename,this.knownname,$sMoveMode]" filter="error" chance="100 * ($iDebugLevel ge 2)" />
                      <set_value name="$bReactToAttack" exact="$sMoveMode == 'defensive'" />
                    </do_if>
                  </actions>
                </interrupt>
              </wait>
            </do_if>

            <!-- If we are aggressive or were attacked, we need to scan for enemies -->
            <do_if value="$sMoveMode == 'aggressive' or $bReactToAttack">
              <run_script name="'ufo.move.capital.combat'" result="$bEngagedEnemies">
                <param name="oTarget" value="this.ship" />
                <param name="mEngageDist" value="$mEngageDist" />
                <param name="mAbortDist" value="$mEngageDist * 3" />
                <param name="mCapShipOffset" value="$mCapShipOffset" />
                <param name="fReportLenienceFactor" value="$fReportLenienceFactor" />
                <param name="iDebugLevel" value="$iDebugLevel" />
              </run_script>

              <set_value name="$bReactToAttack" exact="false" />

              <do_if value="$bEngagedEnemies">
                <continue />
              </do_if>
            </do_if>

            <set_value name="$mDist" exact="this.ship.distanceto.{$oAttackDestination}" />
            <do_if value="$bWasFarAway and $mDist lt 20km">
              <debug_text text="'[%1 - %2 - %3 %4] We have closed in to our attack destination %5 (%6m). Resetting...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname,$mDist]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
              <stop_boost object="this.ship" />
            </do_if>
            <do_else>
              <debug_text text="'[%1 - %2 - %3 %4] Approaching attack destination %5 (%6m)...'.[player.age,this.ship.knownname,this.typename,this.knownname,$oAttackDestination.knownname,$mDist]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
            </do_else>
          </do_while>
        </do_else>
      </do_while>

      <remove_value name="this.$UFO.$oCommander" />
      <remove_value name="this.$oUFO_AttackDestination" />
      <remove_value name="this.$sUFO_MoveMode" />
      <remove_value name="this.$mUFO_EngageDist" />
      <stop_moving object="this.ship" />
      <stop_boost object="this.ship" />
      <set_command command="command.patrol" />
    </actions>
  </attention>
  <on_abort>
    <debug_text text="'[%1 - %2 - %3 %4] Aborted script. Cleaning up state...'.[player.age,this.ship.knownname,this.typename,this.knownname]" filter="error" chance="100 * ($iDebugLevel ge 1)" />
    <!-- On abort, we need to clean up all our state -->
    <remove_value name="this.$UFO.$oCommander" />
    <remove_value name="this.$oUFO_AttackDestination" />
    <remove_value name="this.$sUFO_MoveMode" />
    <remove_value name="this.$mUFO_EngageDist" />
    <stop_boost object="this.ship" />
    <stop_moving object="this.ship"/>
    <set_command command="command.patrol" />

    <!-- We unregister this script from the users of the UFO state container -->
    <set_value name="this.$UFO.$iUseCount" exact="this.$UFO.$iUseCount - 1" />

    <!-- Then, if the UFO state container has no users, we can dispose it -->
    <do_if value="this.$UFO.$iUseCount == 0">
      <signal_objects object="player.primaryship" param="'LibMJ_DisposeDictionary'" param2="this.$UFO" />
      <remove_value name="this.$UFO" />
    </do_if>
  </on_abort>
</aiscript>