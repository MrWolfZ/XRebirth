<?xml version="1.0" encoding="iso-8859-1" ?>
<!-- 
	This file is part of the X Rebirth UFO mod.
	
	Author: MadJoker
  
  Last Change:
	Version: V0.4.3 Beta
	Date: 25th Dec 2013
  
  X Rebirth version: 1.21
-->

<!--
  This script should only be run on entities of type pilot that 
  are currently piloting a ship of size m or smaller.
  
  The main script for fighters in UFO fleets.
-->
<aiscript name="ufo.fighter.pilot.main" version="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../Resources/aiscripts.xsd">
  <interrupts>
    <!-- Handler used to update the parameters under which this entity works -->
    <handler>
      <conditions>
        <event_object_signalled object="this.ship" param="'UFO_UpdateState'" />
      </conditions>
      <actions>
        <debug_text text="$sLogFormat.[player.age,'Received update state request. Updating...']" filter="error" chance="$iLogInfo" />
        
        <!-- We check if any state variable changed -->
        <set_value name="$bFleetChanged" exact="$Fleet != this.$UFO.$Fleet" />
        <set_value name="$bAggressionLevelChanged" exact="$sAggressionLevel != this.$UFO.$sAggressionLevel" />
        <set_value name="$bFormationModeChanged" exact="$sFormationMode != this.$UFO.$sFormationMode" />
        <set_value name="$bEngageDistChanged" exact="$mEngageDist != this.$UFO.$mEngageDist" />
        <set_value name="$bCommanderChanged" exact="$oCommander != this.$UFO.$Fleet.$oCommander" />
        
        <do_if value="$bFleetChanged or $bAggressionLevelChanged or $bFormationModeChanged or $bEngageDistChanged or $bCommanderChanged">          
          <!-- Set all state variables -->
          <set_value name="$Fleet" exact="this.$UFO.$Fleet" />
          <set_value name="$sAggressionLevel" exact="this.$UFO.$sAggressionLevel" />
          <set_value name="$sFormationMode" exact="this.$UFO.$sFormationMode" />
          <set_value name="$mEngageDist" exact="this.$UFO.$mEngageDist" />
          <!-- The maximum distance we may be away from our target before we abort pursuing enemies -->
          <set_value name="$mAbortDist" exact="$mEngageDist + 5km" />
          <set_value name="$mTargetDistMax" exact="10km" />
          <set_value name="$oCommander" exact="$Fleet.$oCommander" />

          <!-- We also interrupt all called scripts and reset -->
          <abort_called_scripts />
        </do_if>
      </actions>
    </handler>
    <!-- Handler used to cancel called scripts if commander changes to far away zone -->
    <handler>
      <conditions>
        <event_object_changed_zone object="this.$UFO.$Fleet.$oCommander" />
      </conditions>
      <actions>
        <set_value name="$mDist" exact="this.ship.distanceto.{$oCommander}" />
        
        <!-- We check if the need to act on the zone change -->
        <do_if value="(this.ship.zone == event.param or $mDist lt $mTargetDistMax) and not event.param.isclass.highway">
          <!-- Remove the warp marker in case it was set -->
          <remove_value name="this.$UFO.$bWarpToTarget" />
        </do_if>
        <do_else>
          <debug_text text="$sLogFormat.[player.age,'Commander changed to far away zone or highway. Resetting...']" filter="error" chance="$iLogInfo" />

          <!-- We also interrupt all called scripts and reset -->
          <abort_called_scripts />
        </do_else>
      </actions>
    </handler>
    <!-- Handler for updating debug level parameters -->
    <handler>
      <conditions>
        <event_object_signalled object="player.primaryship" param="'UFO_UpdateDebugLevel'" />
      </conditions>
      <actions>
        <set_value name="$iLogError" exact="100 * (global.$UFO.$iDebugLevel ge 0)" />
        <set_value name="$iLogInfo" exact="100 * (global.$UFO.$iDebugLevel ge 1)" />
        <set_value name="$iLogFine" exact="100 * (global.$UFO.$iDebugLevel ge 2)" />
        <set_value name="$iLogFinest" exact="100 * (global.$UFO.$iDebugLevel ge 3)" />
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_command command="command.follow" param="this.$UFO.$Fleet.$oCommander" />
    <do_if value="this.$UFO.$sAggressionLevel == global.$UFO.$Stances.$AggressionLevels.$sAggressive">
      <set_command command="command.escort" param="this.$UFO.$Fleet.$oCommander" />
    </do_if>
  </init>
  <attention min="unknown">
    <actions>
      <run_script name="'mj.lib.log'" sinceversion="1">
        <param name="iDebugLevel" value="global.$UFO.$iDebugLevel" />
        <save_retval name="sLogFormat" variable="$sLogFormat" />
        <save_retval name="iLogError" variable="$iLogError" />
        <save_retval name="iLogInfo" variable="$iLogInfo" />
        <save_retval name="iLogFine" variable="$iLogFine" />
        <save_retval name="iLogFinest" variable="$iLogFinest" />
      </run_script>

      <!-- First, we do some parameter sanity checking -->
      <do_if value="this.type != entitytype.pilot or not [class.ship_xs,class.ship_s,class.ship_m].indexof.{this.ship.class}">
        <debug_text text="$sLogFormat.[player.age,'This script should only be run on entities of type pilot that are currently piloting a ship of size m or smaller!']" filter="error" chance="$iLogError" />
        <return />
      </do_if>
      <do_if value="not this.$UFO? or not @this.$UFO.$Fleet">
        <debug_text filter="error" text="$sLogFormat.[player.age,'This script should only be run on entities with a valid UFO state container and that are part of a fleet.']" />
        <return />
      </do_if>

      <!-- We remove the stock commander -->
      <remove_object_commander object="this.ship" />

      <!-- Set all state variables -->
      <set_value name="$Fleet" exact="this.$UFO.$Fleet" />
      <set_value name="$sAggressionLevel" exact="this.$UFO.$sAggressionLevel" />
      <set_value name="$sFormationMode" exact="this.$UFO.$sFormationMode" />
      <set_value name="$mEngageDist" exact="this.$UFO.$mEngageDist" />
      <!-- The maximum distance we may be away from our target before we abort pursuing enemies -->
      <set_value name="$mAbortDist" exact="$mEngageDist + 5km" />
      <set_value name="$mTargetDistMax" exact="10km" />
      <set_value name="$oCommander" exact="$Fleet.$oCommander" />
      
      <!-- The formation to use for in-sector following, and it's parameters -->
      <!-- TODO: set this on fleet level and make it configurable -->
      <set_value name="$eFormation" exact="formationshape.pointguard" />
      <set_value name="$oFormationparam" exact="$oCommander.size * 2" />
      <do_if value="[class.ship_l,class.ship_xl].indexof.{$oCommander.class}">
        <set_value name="$oFormationparam" exact="$oCommander.size / 2" />
      </do_if>
      <set_value name="$oFormationparam2" exact="null" />

      <debug_text text="$sLogFormat.[player.age,'Started main pilot script. Fleet ID: %1, aggression level: %2, formation mode: %3, engagement distance: %4'.[$Fleet.$iId, $sAggressionLevel, $sFormationMode, $mEngageDist]]" filter="error" chance="$iLogInfo" />

      <!-- undock in case we were docked -->
      <run_script name="'move.undock'" sinceversion="1" />

      <!-- We initiate a formation -->
      <debug_text text="$sLogFormat.[player.age,'Creating formation for target \'%1\'.'.[$oCommander.knownname]]" filter="error" chance="$iLogFinest" />
      <create_formation object="$oCommander" formation="$eFormation" param="$oFormationparam" param2="$oFormationparam2" />

      <!-- This label is only used for resuming activity after called scripts were cancelled -->
      <label name="start" />

      <!-- Use while loop since goto is evil -->
      <do_while value="$oCommander.exists and $oCommander.isoperational">

        <set_value name="$mDist" exact="this.ship.distanceto.{$oCommander}" />

        <!-- Check base conditions for engaging enemies -->
        <do_if value="$mDist lt $mAbortDist and $sFormationMode == global.$UFO.$Stances.$FormationModes.$sBreak and not $oCommander.zone.isclass.highway and not @this.$UFO.$bWarpToTarget">
          <!-- Then, we run our combat behavior -->
          <run_script name="'ufo.fighter.pilot.combat'" result="$bInCombat" sinceversion="1" />

          <!-- If we are still in combat, we need to reset the main loop -->
          <do_if value="$bInCombat">
            <continue />
          </do_if>
        </do_if>

        <!-- We handle in-zone and short distances via formations -->
        <do_if value="(this.ship.zone == $oCommander.zone or $mDist lt $mTargetDistMax) and not $oCommander.zone.isclass.highway">
          <do_if value="not @this.ship.formationleader.exists">
            <debug_text text="$sLogFormat.[player.age,'Joining follower formation for target \'%1\'.'.[$oCommander.knownname]]" filter="error" chance="$iLogFine" />
            <join_formation leader="$oCommander" object="this.ship" />
          </do_if>

          <wait sinceversion="1">
            <interrupt>
              <conditions>
                <event_object_attacked group="$Fleet.$gShips" />
              </conditions>
            </interrupt>
            <interrupt_after_time time="5s - (0.5s * this.skill.combat)" />
          </wait>
        </do_if>

        <do_else>
          <leave_formation object="this.ship" />

          <debug_text text="$sLogFormat.[player.age,'Our target \'%1\' is far away (%2m).'.[$oCommander.knownname,$mDist]]" filter="error" chance="$iLogFinest" />

          <!-- We might have been marked as needing to warp to our target -->
          <do_if value="@this.$UFO.$bWarpToTarget">
            <debug_text text="$sLogFormat.[player.age,'We need to warp to target \'%1\' at %2. Gaining distance while preparing warp...'.[$oCommander.knownname,$oCommander.zone.knownname]]" filter="error" chance="$iLogInfo" />

            <!-- We store the position of the target here -->
            <create_position name="$oCommanderPos" object="$oCommander" space="$oCommander.zone" />

            <!-- Then we wait based on the navigation skill of the pilot -->
            <set_value name="$tOffset" exact="10s - (2s * this.skill.navigation)" />
            <set_value name="$tWait" min="1.5s + $tOffset" max="3s + $tOffset" />

            <!-- While waiting for the warp, we gain distance to simulate disengaging in case there were enemies -->
            <move_to object="this.ship" destination="this.ship.zone" flightbehaviour="flightbehaviour.gaindistance" forcesteering="true" sinceversion="1">
              <interrupt_after_time time="$tWait" />
            </move_to>

            <!-- Get position in space near target, and face the target -->
            <!-- TODO: sometimes this bugs out -->
            <get_safe_pos result="$oSafePos" zone="$oCommander.zone" radius="this.ship.size * 1.4f" value="$oCommanderPos" ignored="this.ship" />
            <create_orientation name="$oRotation" refobject="$oCommander" orientation="look_at">
              <position value="$oSafePos"/>
            </create_orientation>
            
            <warp object="this.ship" zone="$oCommander.zone">
              <position value="$oSafePos" />
              <rotation value="$oRotation" />
            </warp>

            <debug_text text="$sLogFormat.[player.age,'We warped to our target \'%1\' at %2.'.[$oCommander.knownname,$oCommander.zone.knownname]]" filter="error" chance="$iLogInfo" />

            <!-- If we ourselves have followers, they need to know we warped, since we skipped the highways -->
            <remove_value name="this.$UFO.$bWarpToTarget" />

            <!-- Once the warp is complete we wait a short time for the zone change to register -->
            <wait exact="0.5s" sinceversion="1" />
          </do_if>

          <!-- 
            In case the target is in a highway, we use a hack. Instead of trying to use the
            highway as well (which I tried, but didn't completely manage), we simply wait
            for the target to exit and then after a short delay warp ourselves to it. If you 
            are a modder reading this and thinking about fixing it, you sure can try, but I 
            am warning you that it will drive you into despair :) 
            One unsolved issue is that NPC ships fly faster than the Skunk in highways, which
            means I would have to do some shenanigans with warping the followers around in
            the highway, etc, which I didn't want to do in the end.
          -->
          <do_elseif value="$oCommander.zone.isclass.highway">
            <debug_text text="$sLogFormat.[player.age,'Target \'%1\' is moving in highway %2. Gaining distance while waiting for it to exit...'.[$oCommander.knownname,$oCommander.zone.knownname]]" filter="error" chance="$iLogInfo" />

            <!-- We mark ourselves for needing to warp -->
            <set_value name="this.$UFO.$bWarpToTarget" exact="true" />

            <!-- Then we wait based on the navigation skill of the pilot -->
            <set_value name="$tOffset" exact="5s - (1s * this.skill.navigation)" />
            <set_value name="$tWait" min="1s + $tOffset" max="2s + $tOffset" />
            
            <!-- 
              We wait until our target leaves the highway. Since we are going to warp to it
              anyways, we are acting defensively here and go into "flee" mode in case we
              were engaging enemies (thus saving us an actualy combat check).
              Also note that the zone change will be registered via the global interrupt. We
              also to a time-based interrupt.
            -->
            <move_to object="this.ship" destination="this.ship.zone" flightbehaviour="flightbehaviour.gaindistance" forcesteering="true" sinceversion="1">
              <interrupt_after_time time="$tWait" />
            </move_to>
          </do_elseif>

          <!-- otherwise, we make a one-zone trip towards our commander -->
          <do_else>
            <run_script name="'ufo.fighter.pilot.move.zone'" sinceversion="1" />
          </do_else>
        </do_else>
      </do_while>

      <!-- TODO: assign new commander? notify player? -->
      <debug_text text="$sLogFormat.[player.age,'Target was destroyed. Cancel following...']" filter="error" chance="$iLogInfo" />
      <remove_value name="this.$UFO.$bWarpToTarget" />
      <leave_formation object="this.ship" />
      <stop_moving object="this.ship" />
      <set_command command="command.patrol" />
    </actions>
  </attention>
  <on_abort>
    <debug_text text="$sLogFormat.[player.age,'Aborted script. Cleaning up state...']" filter="error" chance="$iLogInfo" />
    <remove_value name="this.$UFO.$bWarpToTarget" />
    <leave_formation object="this.ship" />
    <stop_moving object="this.ship"/>
    <set_command command="command.patrol" />
  </on_abort>
</aiscript>