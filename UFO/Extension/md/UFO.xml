<?xml version="1.0" encoding="utf-8"?>
<!-- 
	This file is part of the X Rebirth UFO mod.
	
	Author: MadJoker
  
	Last Change:
	Version: V0.5.0 Beta
	Date: 1st May 2014
  
	X Rebirth version: 1.31
-->

<!--	
	About variables: Variable declarations in this XML scripting language are
	untyped, which sometimes makes it hard to know what a specific variable
	is. Therefore, I decided to use the Hungarian notation.
	
	I prefix every variable with a lower case letter indicating its type. The
	prefixes are:
	
	l - List
	a - Array
	o - Object
	i - Integer
	s - String
	f - Float or Double
	b - Boolean
	g - Group
	m - Distance
	t - Time
  
  There are only two exceptions: 
  1) counting variables in loops usually take the form of $i or $j
  2) All dictionaries lack a prefix and start with an upper case character
     (e.g. $UFO, $Fleet)
-->

<!--	
	About lists and arrays: As far as I could determine, there is no array
  type in this XML script language, only lists (i.e. ['a','b','c'] creates
  a list of size 3). However, I decided to still use arrays in the way that
  if I create an array variable (i.e. $aChars) then this 'list' is not meant
  to ever change size.
-->

<!--
  About dictionaries (aka associative arrays): There is no built-in support for
  these in the script language. However, they can be simulated by using virtual
  cue actors (which LibMJ is doing). Then, you can use such a dictionary as if
  it had a blackboard (e.g. $Dict.$oValue).
-->
<mdscript name="UFO" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="F:/X Rebirth Modding/Original Assets/md/md.xsd">
  <cues>
    <!-- 
      The cue to initialize UFO 
    -->
    <cue name="Initialize" instantiate="false" namespace="this">
      <conditions>
        <check_any>
          <!-- Will fire once on every game load, but not on new game -->
          <event_player_created />
          <!-- Will fire as long as game is less than 20 seconds old -->
          <event_cue_signalled cue="md.Setup.GameStart" />
        </check_any>
      </conditions>
      <actions>
        <set_value name="$sName" exact="'UFO'" />

        <!-- LibMJ version number -->
        <set_value name="$iMajorVersion" exact="0" />
        <set_value name="$iMinorVersion" exact="5" />
        <set_value name="$iBugfixVersion" exact="0" />

        <set_value name="$sInstallMessage" exact="{99998,9999}" />
        <set_value name="$sUpgradeMessage" exact="{99998,9998}" />

        <!-- First, we create our own config container if it doesn't exist -->
        <do_if value="not global.$UFO?">
          <create_cue_actor name="$Config" cue="md.LibMJ.DictionaryContainer" />
          <set_value name="global.$UFO" exact="$Config" />
					
		  <!-- We also check old version numbers for backwards compatiblity -->
		  <do_if value="global.$iUFO_MajorVersion?">
			  <set_value name="$Config.$iMajorVersion" exact="global.$iUFO_MajorVersion" />
			  <set_value name="$Config.$iMinorVersion" exact="global.$iUFO_MinorVersion" />
			  <set_value name="$Config.$iBugfixVersion" exact="global.$iUFO_BugfixVersion" />
			  <set_value name="$Config.$sVersion" exact="global.$sUFO_Version" />
		  </do_if>
        </do_if>
        <do_else>
          <set_value name="$Config" exact="global.$UFO" />
        </do_else>

        <set_value name="$iOldDebugLevel" exact="@$Config.$iDebugLevel" />

        <!-- UFO debug level -->
        <set_value name="$Config.$iDebugLevel" exact="2" />

        <do_if value="$iOldDebugLevel != $Config.$iDebugLevel">
          <signal_objects object="player.primaryship" param="'UFO_UpdateDebugLevel'" />
        </do_if>

        <signal_cue_instantly cue="md.LibMJ.GenericInitialization" param="[$sName,$Config,$iMajorVersion,$iMinorVersion,$iBugfixVersion, $sInstallMessage, $sUpgradeMessage]" />

        <!-- Then, we initialize some global constants -->
        <signal_cue_instantly cue="InitializeConstants" />

        <!-- Finally, we reset the cue so that it will trigger again on next game load -->
        <reset_cue cue="this" />
      </actions>
    </cue>

    <!--
      Cue to set some constants used by UFO.
    -->
    <cue name="InitializeConstants" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <!-- Stances -->
        <do_if value="not global.$UFO.$Stances?">
          <create_cue_actor name="global.$UFO.$Stances" cue="md.LibMJ.DictionaryContainer" />
        </do_if>
        <do_if value="not global.$UFO.$Stances.$AggressionLevels?">
          <create_cue_actor name="global.$UFO.$Stances.$AggressionLevels" cue="md.LibMJ.DictionaryContainer" />
        </do_if>
        <set_value name="global.$UFO.$Stances.$AggressionLevels.$sPassive" exact="'passive'" />
        <set_value name="global.$UFO.$Stances.$AggressionLevels.$sDefensive" exact="'defensive'" />
        <set_value name="global.$UFO.$Stances.$AggressionLevels.$sAggressive" exact="'aggressive'" />
        <do_if value="not global.$UFO.$Stances.$FormationModes?">
          <create_cue_actor name="global.$UFO.$Stances.$FormationModes" cue="md.LibMJ.DictionaryContainer" />
        </do_if>
        <set_value name="global.$UFO.$Stances.$FormationModes.$sBreak" exact="'break'" />
        <set_value name="global.$UFO.$Stances.$FormationModes.$sNoBreak" exact="'noBreak'" />

        <!-- Fleet Commands -->
        <do_if value="not global.$UFO.$Commands?">
          <create_cue_actor name="global.$UFO.$Commands" cue="md.LibMJ.DictionaryContainer" />
        </do_if>
        <set_value name="global.$UFO.$Commands.$sEscort" exact="'escort'" />
        <set_value name="global.$UFO.$Commands.$sMoveToZone" exact="'moveToZone'" />
        
        <!-- Skill related -->
        <do_if value="not global.$UFO.$Skills?">
          <create_cue_actor name="global.$UFO.$Skills" cue="md.LibMJ.DictionaryContainer" />
        </do_if>
        <set_value name="global.$UFO.$Skills.$iMinNavSkillForInSectorJump" exact="4" />
      </actions>
    </cue>

    <!--
      Cue to remove all legacy information of older UFO versions.
    -->
    <cue name="RemoveLegacyState" instantiate="true" namespace="this">
      <conditions>
        <check_all>
          <!-- This will fire on every game load -->
          <event_player_created />
        </check_all>
      </conditions>
      <delay min="4s" />
      <actions>
        <!-- Find all capital ships -->
        <find_ship groupname="$gPlayerShips" space="player.galaxy" owner="faction.player" multiple="true">
          <match class="class.ship_xs" negate="true" />
        </find_ship>
        <remove_from_group group="$gPlayerShips" object="player.primaryship" />

        <debug_text text="'Found %1 player owned ships. Removing legacy state...'.[$gPlayerShips.count]" filter="error" chance="100 * (global.$UFO.$iDebugLevel ge 3)" />

        <!-- Find all entities on all player ships -->
        <set_value name="$lEntities" exact="[player.copilot]" />
        <do_all exact="$gPlayerShips.count" counter="$i">
          <set_value name="$oShip" exact="$gPlayerShips.{$i}"/>
          <do_if value="$oShip.pilot? and $oShip.pilot.exists">
            <append_to_list name="$lEntities" exact="$oShip.pilot" />
          </do_if>
          <do_if value="$oShip.defencenpc? and $oShip.defencenpc.exists">
            <append_to_list name="$lEntities" exact="$oShip.defencenpc" />
          </do_if>
          <do_if value="$oShip.engineer? and $oShip.engineer.exists">
            <append_to_list name="$lEntities" exact="$oShip.engineer" />
          </do_if>
        </do_all>
        
        <!-- Then iterate over all entities and clean up state -->
        <do_all exact="$lEntities.count" counter="$i">
          <set_value name="$oEntity" exact="$lEntities.{$i}"/>

          <remove_value name="$oEntity.$oUFO_Commander" />
          <remove_value name="$oEntity.$sUFO_Stance" />
          <remove_value name="$oEntity.$sUFO_FollowMode" />
          <remove_value name="$oEntity.$mUFO_EngageDist" />
          <remove_value name="$oEntity.$sUFO_lastBattleStance" />
        </do_all>
      </actions>
    </cue>

    <!--
      This is where we add the root menu (i.e. 'Manage Fleets' menu entry).
    -->
    <cue name="SectionHandlerUniverse" instantiate="true" namespace="this">
      <conditions>
        <check_any>
          <event_conversation_next_section section="gMainUniverse_main" />
          <event_conversation_returned_to_section section="gMainUniverse_main" />
        </check_any>
        <check_value value="global.$UFO?" />
      </conditions>
      <!-- 
        This delay is needed, since when we return with 'close' from the fleet management menu,
        we are not guaranteed to run first with this cue for all cues that react the returning
        the this menu section. Adding the 1ms delay circumvents that problem, by ensuring we run
        after all other cues have triggered.
      -->
      <delay exact="1ms" />
      <actions>
        
        <!-- Should we uninstall UFO? -->
        <do_if value="@event.param3.{3} == 'UFOUninstall'">
          <add_conversation_view view="facenormal" />
          <signal_cue_instantly cue="Uninstall" />
          <cancel_conversation />
        </do_if>
        <do_else>
          <!-- We need to check for return from the fleet management menu -->
          <do_if value="@event.param3.{1} == 'UFOFleetManagement'">
            <!-- We might have faced the detail monitor -->
            <add_conversation_view view="facenormal" />

            <signal_cue_instantly cue="md.UFO_Management.FleetManagement" param="event.param3" />
          </do_if>
          <!-- If all menus were closed, we don't re-render -->
          <do_if value="@event.param3.{2} == 'close'">
            <cancel_conversation />
          </do_if>
          <do_else>
            <!-- Add the fleet management menu entry -->
            <add_player_choice_sub text="readtext.{99998}.{1 + (player.platform != null)}" position="top_right" section="gUFO_MenuFleetManagement" comment="Manage your fleets" selectable="player.platform == null" />
          </do_else>
        </do_else>
      </actions>
    </cue>

    <!--
      Uninstallation cue to remove all UFO state information.
    -->
    <cue name="Uninstall" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <find_ship groupname="$gPlayerShips" owner="faction.player" space="player.galaxy" multiple="true" />
        <remove_from_group group="$gPlayerShips" object="player.primaryship" />

        <!-- Extract the UFO state containers into alternate dictionary representation -->
        <set_value name="$lEntities" exact="[player.copilot]" />
        <do_all exact="$gPlayerShips.count" counter="$i">
          <set_value name="$oShip" exact="$gPlayerShips.{$i}"/>
          <do_if value="$oShip.pilot? and $oShip.pilot.exists">
            <append_to_list name="$lEntities" exact="$oShip.pilot" />
          </do_if>
          <do_if value="$oShip.defencenpc? and $oShip.defencenpc.exists">
            <append_to_list name="$lEntities" exact="$oShip.defencenpc" />
          </do_if>
          <do_if value="$oShip.engineer? and $oShip.engineer.exists">
            <append_to_list name="$lEntities" exact="$oShip.engineer" />
          </do_if>
        </do_all>

        <do_all exact="$lEntities.count" counter="$i">
          <do_if value="$lEntities.{$i}.$UFO?">
            <set_value name="$lEntities.{$i}.$UFO.$bDeactivate" exact="true" />
          </do_if>
        </do_all>

        <signal_cue_instantly cue="md.UFO_Management.DeactivateFleetScripts" param="[$lEntities]" />

        <remove_cue_actor actor="global.$UFO.$Stances.$AggressionLevels" cue="md.LibMJ.DictionaryContainer" />
        <remove_cue_actor actor="global.$UFO.$Stances.$FormationModes" cue="md.LibMJ.DictionaryContainer" />
        <remove_cue_actor actor="global.$UFO.$Stances" cue="md.LibMJ.DictionaryContainer" />

        <signal_cue_instantly cue="md.LibMJ.GenericUninstall" param="['UFO',global.$UFO]" />

        <remove_cue_actor actor="global.$UFO" cue="md.LibMJ.DictionaryContainer" />
        <remove_value name="global.$UFO" />
      </actions>
    </cue>
  </cues>
</mdscript>