<?xml version="1.0" encoding="utf-8"?>
<!-- 
	This file is part of the X Rebirth UFO mod.
	
	Author: MadJoker
  
	Last Change:
	Version: V0.6.0 Beta
	Date: 17th January 2015
  
	X Rebirth version: 3.10
-->
<mdscript name="UFO_Management" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="F:/X Rebirth Modding/Original Assets/md/md.xsd">
  <cues>
    <!--
      Cue for managing fleets via the corresponding menu.
    -->
    <cue name="SectionHandlerMenuFleetManagement" instantiate="true" namespace="this">
      <conditions>
        <check_any>
          <event_conversation_next_section section="gUFO_MenuFleetManagement" />
          <event_conversation_returned_to_section section="gUFO_MenuFleetManagement" />
        </check_any>
        <check_value value="global.$UFO?" />
      </conditions>
      <actions>
        <do_if value="not global.$UFO.$lFleets?">
          <debug_text filter="error" text="'Initializing UFO fleet container...'" chance="100 * (global.$UFO.$iDebugLevel ge 1)" />

          <create_cue_actor name="$Fleet" cue="md.LibMJ.DictionaryContainer" />
          <set_value name="$Fleet.$iId" exact="1" />
          <set_value name="$Fleet.$sName" exact="{99998,1008}" />
          <set_value name="$Fleet.$oCommander" exact="player.primaryship" />
          <add_to_group groupname="$Fleet.$gShips" object="player.primaryship" />
          <set_value name="$Fleet.$lCommand" exact="[global.$UFO.$Commands.$sEscort,[player.primaryship]]" />
          <set_value name="global.$UFO.$lFleets" exact="[$Fleet]" />

          <signal_cue_instantly cue="InitializeEntityState" param="[player.copilot]" />
          <set_value name="player.copilot.$UFO.$sAggressionLevel" exact="global.$UFO.$Stances.$AggressionLevels.$sDefensive" />
          <set_value name="player.copilot.$UFO.$sFormationMode" exact="global.$UFO.$Stances.$FormationModes.$sBreak" />
          <set_value name="player.copilot.$UFO.$mEngageDist" exact="10km" />
          <set_value name="player.copilot.$UFO.$Fleet" exact="$Fleet" />
        </do_if>

        <set_value name="player.entity.$UFO" exact="global.$UFO" />

        <debug_text filter="error" text="'Opening UFO fleet management menu...'" chance="100 * (global.$UFO.$iDebugLevel ge 1)" />

        <!-- Extract fleet information -->
        <set_value name="$lIds" exact="[]" />
        <set_value name="$lNames" exact="[]" />
        <set_value name="$lCommanders" exact="[]" />
        <set_value name="$lShipLists" exact="[]" />
        <set_value name="$lCommands" exact="[]" />

        <do_all exact="global.$UFO.$lFleets.count" counter="$i">
          <set_value name="$Fleet" exact="global.$UFO.$lFleets.{$i}" />

          <!-- We sanitize the fleets here to remove destroyed ships -->
          <create_group groupname="$gActiveShips" />
          <do_all exact="$Fleet.$gShips.count" counter="$i">
            <set_value name="$oShip" exact="$Fleet.$gShips.{$i}" />
            <do_if value="@$oShip.exists and @$oShip.isoperational">
              <!-- We also check whether there are still UFO scripts running on the pilot of each ship -->
              <do_if value="$oShip.pilot.exists and @$oShip.pilot.$UFO.$lActiveScripts.count gt 0">
                <add_to_group groupname="$gActiveShips" object="$oShip" />
              </do_if>
            </do_if>
          </do_all>
					
		  <!-- Make sure the player fleet contains the Skunk -->
		  <do_if value="$Fleet.$iId == 1">
			  <add_to_group groupname="$gActiveShips" object="player.primaryship" />
		  </do_if>
					
          <set_value name="$Fleet.$gShips" exact="$gActiveShips" />
					
		  <!-- If there are no ships in the fleet anymore, we ignore it -->
		  <do_if value="not @$Fleet.$oCommander.exists or not @$Fleet.$oCommander.isoperational or $gActiveShips.count == 0">
			  <continue />
		  </do_if>

          <append_to_list name="$lIds" exact="$Fleet.$iId" />
          <append_to_list name="$lNames" exact="$Fleet.$sName" />
          <append_to_list name="$lCommanders" exact="$Fleet.$oCommander" />
          <append_to_list name="$lShipLists" exact="$Fleet.$gShips.list" />
          <append_to_list name="$lCommands" exact="$Fleet.$lCommand" />

          <debug_text filter="error" text="'Adding fleet to menu (id = %1, name = %2, commander = %3, nr. of ships = %4, command data: %5)...'.[$Fleet.$iId, $Fleet.$sName, $Fleet.$oCommander.knownname, $Fleet.$gShips.count, $Fleet.$lCommand]" chance="100 * (global.$UFO.$iDebugLevel ge 2)" />
        </do_all>

        <find_ship groupname="$gPlayerShips" owner="faction.player" space="player.galaxy" multiple="true">
          <match class="class.ship_xs" negate="true" />
        </find_ship>
        <remove_from_group group="$gPlayerShips" object="player.primaryship" />

        <!-- Extract the UFO state containers into alternate dictionary representation -->
        <set_value name="$lEntities" exact="[player.copilot]" />
        <do_all exact="$gPlayerShips.count" counter="$i">
          <set_value name="$oShip" exact="$gPlayerShips.{$i}"/>
          <do_if value="$oShip.pilot? and $oShip.pilot.exists">
            <append_to_list name="$lEntities" exact="$oShip.pilot" />
          </do_if>
          <do_if value="$oShip.defencenpc? and $oShip.defencenpc.exists">
            <append_to_list name="$lEntities" exact="$oShip.defencenpc" />
          </do_if>
          <do_if value="$oShip.engineer? and $oShip.engineer.exists">
            <append_to_list name="$lEntities" exact="$oShip.engineer" />
          </do_if>
        </do_all>
        <signal_cue_instantly cue="TransformStateContainers" param="[this,$lEntities]" />
        <set_value name="$lStateContainers" exact="$aReturn.{1}" />
        <remove_value name="$aReturn" />

        <add_conversation_view view="closeupdetailmonitor" />
        <open_conversation_menu menu="LibMJ" param="['UFOFleetManagement','gUFO_MenuFleetManagement_close',$lIds,$lNames,$lCommanders,$lShipLists,$lCommands,$gPlayerShips.list,$lStateContainers,player.copilot,global.$UFO.$iDebugLevel]" />
      </actions>
    </cue>

    <!-- 
      Cue which handles the return values from the Fleet Management menu 
    -->
    <cue name="FleetManagement" instantiate="true" namespace="this">
      <conditions>
        <check_any>
          <event_conversation_next_section section="gUFO_MenuFleetManagement_close" />
          <event_cue_signalled />
        </check_any>
      </conditions>
      <actions>
        <do_if value="event.param == 'gUFO_MenuFleetManagement_close'">
          <set_value name="$aReturnArgs" exact="event.param2" />
        </do_if>
        <do_else>
          <set_value name="$aReturnArgs" exact="event.param" />
        </do_else>
        
        <!-- First, we check whether the debug level was updated -->
        <set_value name="$iDebugLevel" exact="$aReturnArgs.{9}" />

        <do_if value="$iDebugLevel != global.$UFO.$iDebugLevel">
          <set_value name="global.$UFO.$iDebugLevel" exact="$iDebugLevel" />
          <signal_objects object="player.primaryship" param="'UFO_UpdateDebugLevel'" />
        </do_if>

        <!-- Clean up old fleets list -->
        <debug_text filter="error" text="'Cleaning up UFO fleet container...'" chance="100 * (global.$UFO.$iDebugLevel ge 2)" />
        <do_all exact="global.$UFO.$lFleets.count" counter="$i">
          <set_value name="$Fleet" exact="global.$UFO.$lFleets.{$i}" />
          <remove_cue_actor actor="$Fleet" cue="md.LibMJ.DictionaryContainer" />
        </do_all>
        <set_value name="global.$UFO.$lFleets" exact="[]" />

        <!-- Read return values and create the corresponding fleets -->
        <set_value name="$lIds" exact="$aReturnArgs.{3}" />
        <set_value name="$lNames" exact="$aReturnArgs.{4}" />
        <set_value name="$lCommanders" exact="$aReturnArgs.{5}" />
        <set_value name="$lShipLists" exact="$aReturnArgs.{6}" />
        <set_value name="$lCommands" exact="$aReturnArgs.{7}" />

        <debug_text filter="error" text="'Re-initializing UFO fleet container with %1 fleets...'.[$lIds.count]" chance="100 * (global.$UFO.$iDebugLevel ge 2)" />
        <do_all exact="$lIds.count" counter="$i">
          <create_cue_actor name="$Fleet" cue="md.LibMJ.DictionaryContainer" />
          <set_value name="$Fleet.$iId" exact="$i" />
          <set_value name="$Fleet.$sName" exact="$lNames.{$i}" />
          <set_value name="$Fleet.$oCommander" exact="$lCommanders.{$i}" />
          <add_to_group groupname="$Fleet.$gShips" list="$lShipLists.{$i}" />
          <set_value name="$Fleet.$lCommand" exact="$lCommands.{$i}" />
          <create_group groupname="$Fleet.$gReportedEnemies" />

          <!-- Fleet IDs should correspond with the indices in the list at this point -->
          <append_to_list name="global.$UFO.$lFleets" exact="$Fleet" />

          <debug_text filter="error" text="'Reading fleet (id = %1, name = %2, commander = %3, nr. of ships = %4, command data: %5)...'.[$Fleet.$iId,$Fleet.$sName,$Fleet.$oCommander.knownname,$Fleet.$gShips.count,$Fleet.$lCommand]" chance="100 * (global.$UFO.$iDebugLevel ge 2)" />
        </do_all>

        <!-- Then, we read and parse the entity state containers -->
        <set_value name="$lStateContainers" exact="$aReturnArgs.{8}" />
        <signal_cue_instantly cue="RestoreStateContainers" param="[this,$lStateContainers]" />
        <signal_cue_instantly cue="DeactivateFleetScripts" param="[$aReturn.{1}]" />
        <remove_value name="$aReturn" />

        <!-- Now, we can finally start the scripts if necessary, or signal a parameter update -->
        <signal_cue_instantly cue="ActivateFleetScripts" />
      </actions>
    </cue>

    <!-- 
      Cue to deactivate all running fleet scripts on all given entities, that have the
      deactivation flag set and have any fleet scripts running.
    -->
    <cue name="DeactivateFleetScripts" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$lEntities" exact="event.param.{1}" />

        <!-- Iterate over all given entities, and find those which have the deactivation flag set -->
        <do_all exact="$lEntities.count" counter="$i">
          <set_value name="$oEntity" exact="$lEntities.{$i}" />
          <do_if value="@$oEntity.$UFO.$bDeactivate">
            <set_value name="$iActiveScripts" exact="$oEntity.$UFO.$lActiveScripts.count" />
            <debug_text filter="error" text="'Deactivating %1 UFO script(s) for entity \'%2\'...'.[$iActiveScripts,$oEntity.knownname]" chance="100 * (global.$UFO.$iDebugLevel ge 1)" />

            <!-- We only abort the active scripts, if there were actually some fleet scripts running, as to not mess up any other scripts -->
            <do_if value="$iActiveScripts gt 0">
              <abort_scripts entity="$oEntity" />
							
			  <!-- For defence officers, we re-activate the stock script -->
			  <do_if value="$oEntity.type == entitytype.defencecontrol">
				  <start_script name="'fight.defend.capital'" object="$oEntity" />
			  </do_if>
            </do_if>

            <!-- Then, we can dispose of the UFO state container -->
            <signal_cue_instantly cue="DisposeEntityState" param="[$oEntity]" />
          </do_if>
          <do_elseif value="$oEntity.$UFO?">
            <remove_value name="$oEntity.$UFO.$bDeactivate" />
          </do_elseif>
        </do_all>
      </actions>
    </cue>

    <!-- 
      Cue to activate the fleet scripts on all ships in all fleets, or alternatively
      signal a parameter update if scripts were already running.
    -->
    <cue name="ActivateFleetScripts" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <!-- Iterate over all fleets, and activate or update scripts for all entities -->
        <do_all exact="global.$UFO.$lFleets.count" counter="$i">
          <set_value name="$Fleet" exact="global.$UFO.$lFleets.{$i}" />

          <!-- We signal all ships in the fleet to cause all entities which already have a script running to update their state -->
          <signal_objects group="$Fleet.$gShips" param="'UFO_UpdateState'" />
          <debug_text filter="error" text="'Signaling state updates for fleet \'%1\'...'.[$Fleet.$iId]" chance="100 * (global.$UFO.$iDebugLevel ge 1)" />

          <!-- We then iterate over all ships and activate scripts for all entities not running any yet -->
          <do_all exact="$Fleet.$gShips.count" counter="$j">
            <set_value name="$oShip" exact="$Fleet.$gShips.{$j}" />

            <!-- We filter out the player entity -->
            <do_if value="@$oShip.pilot.exists and @$oShip.pilot != player.entity and @$oShip.pilot.$UFO.$lActiveScripts.count == 0">
              <start_script name="'ufo.start'" object="$oShip.pilot" />
            </do_if>
            <do_if value="@$oShip.defencenpc.exists and @$oShip.defencenpc.$UFO.$lActiveScripts.count == 0">
              <start_script name="'ufo.start'" object="$oShip.defencenpc" />
            </do_if>
          </do_all>

          <do_if value="$Fleet.$oCommander != player.primaryship">
            <!-- Check if command changed and re-start scripts on commander if so -->
            <set_value name="$sCurCommand" exact="@$Fleet.$oCommander.pilot.$UFO.$sCommand"/>
            <set_value name="$aCurCommandArgs" exact="@$Fleet.$oCommander.pilot.$UFO.$aCommandArgs"/>
            <set_value name="$bNewCommand" exact="false" />
            <do_if value="$sCurCommand != $Fleet.$lCommand.{1}">
              <set_value name="$bNewCommand" exact="true" />
            </do_if>
            <do_else>
              <set_value name="$aNewCommandArgs" exact="$Fleet.$lCommand.{2}" />
              <do_if value="@$aCurCommandArgs.count != $aNewCommandArgs.count">
                <set_value name="$bNewCommand" exact="true" />
              </do_if>
              <do_else>
                <!-- Iterate over command args and check if they changed -->
                <do_all exact="$aCurCommandArgs.count" counter="$i">
                  <do_if value="$aCurCommandArgs.{$i} != $aNewCommandArgs.{$i}">
                    <set_value name="$bNewCommand" exact="true" />
                    <break />
                  </do_if>
                </do_all>
              </do_else>
            </do_else>

            <!-- Now, if we have a new command, we restart the commander script -->
            <do_if value="$bNewCommand">
              <start_script name="'ufo.start'" object="$Fleet.$oCommander.pilot" />
            </do_if>
          </do_if>
        </do_all>
      </actions>
    </cue>

    <!-- 
      Cue to transform a list of UFO state containers to two-list representations
    -->
    <cue name="TransformStateContainers" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$oCue" exact="event.param.{1}" />
        <set_value name="$lEntities" exact="event.param.{2}" />
        <set_value name="$lStateContainers" exact="[]" />

        <do_all exact="$lEntities.count" counter="$i">
          <set_value name="$oEntity" exact="$lEntities.{$i}" />
          <set_value name="$lKeys" exact="[]" />
          <set_value name="$lValues" exact="[]" />

          <debug_text filter="error" text="'Transforming UFO state container for entity \'%1\'...'.[$oEntity.knownname]" chance="100 * (global.$UFO.$iDebugLevel ge 3)" />

          <!-- Extract the information if it exists -->
          <do_if value="$oEntity.$UFO?">
            <do_if value="$oEntity.$UFO.$Fleet?">
              <append_to_list name="$lKeys" exact="'iFleetId'" />
              <append_to_list name="$lValues" exact="$oEntity.$UFO.$Fleet.$iId" />
            </do_if>
            <do_if value="$oEntity.$UFO.$sAggressionLevel?">
              <append_to_list name="$lKeys" exact="'sAggressionLevel'" />
              <append_to_list name="$lValues" exact="$oEntity.$UFO.$sAggressionLevel" />
            </do_if>
            <do_if value="$oEntity.$UFO.$sFormationMode?">
              <append_to_list name="$lKeys" exact="'sFormationMode'" />
              <append_to_list name="$lValues" exact="$oEntity.$UFO.$sFormationMode" />
            </do_if>
            <do_if value="$oEntity.$UFO.$mEngageDist?">
              <append_to_list name="$lKeys" exact="'mEngageDist'" />
              <append_to_list name="$lValues" exact="$oEntity.$UFO.$mEngageDist" />
            </do_if>
          </do_if>

          <append_to_list name="$lStateContainers" exact="[$oEntity,[$lKeys,$lValues]]" />
        </do_all>

        <!-- Set return value -->
        <set_value name="$oCue.$aReturn" exact="[$lStateContainers]" />
      </actions>
    </cue>

    <!-- 
      Cue to restore a list of UFO state containers from their two-list representations
    -->
    <cue name="RestoreStateContainers" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$oCue" exact="event.param.{1}" />
        <set_value name="$lStateContainers" exact="event.param.{2}" />
        <set_value name="$lEntites" exact="[]" />

        <do_all exact="$lStateContainers.count" counter="$i">
          <set_value name="$oEntity" exact="$lStateContainers.{$i}.{1}" />
          <set_value name="$lKeys" exact="$lStateContainers.{$i}.{2}.{1}" />
          <set_value name="$lValues" exact="$lStateContainers.{$i}.{2}.{2}" />

          <signal_cue_instantly cue="InitializeEntityState" param="[$oEntity]" />
          <append_to_list name="$lEntites" exact="$oEntity" />

          <debug_text filter="error" text="'Restoring UFO state container for entity \'%1\'...'.[$oEntity.knownname]" chance="100 * (global.$UFO.$iDebugLevel ge 2)" />

          <set_value name="$bHasFleet" exact="false" />

          <!-- Restore the information -->
          <do_all exact="$lKeys.count" counter="$j">
            <set_value name="$sKey" exact="$lKeys.{$j}" />
            <set_value name="$oValue" exact="$lValues.{$j}" />

            <debug_text filter="error" text="'Setting UFO state container value for entity \'%1\': [\'%2\'] = %3 ...'.[$oEntity.knownname,$sKey,$oValue]" chance="100 * (global.$UFO.$iDebugLevel ge 3)" />

            <!-- Do a "switch" -->
            <do_if value="$sKey == 'iFleetId'">
              <set_value name="$iFleetId" exact="$oValue" />
              <do_if value="$iFleetId gt 0">
                <set_value name="$Fleet" exact="global.$UFO.$lFleets.{$iFleetId}" />
                
                <!-- We need to check here that the fleet of the ship did not change or we have to abort scripts -->
                <do_if value="@$oEntity.$UFO.$Fleet.$oCommander != $Fleet.$oCommander and @$oEntity.$UFO.$lActiveScripts.count gt 0">
                  <abort_scripts entity="$oEntity" />
                </do_if>
                
                <set_value name="$oEntity.$UFO.$Fleet" exact="$Fleet" />
                <set_value name="$bHasFleet" exact="true" />
              </do_if>
            </do_if>
            <do_elseif value="$sKey == 'sAggressionLevel'">
              <set_value name="$oEntity.$UFO.$sAggressionLevel" exact="$oValue" />
            </do_elseif>
            <do_elseif value="$sKey == 'sFormationMode'">
              <set_value name="$oEntity.$UFO.$sFormationMode" exact="$oValue" />
            </do_elseif>
            <do_elseif value="$sKey == 'mEngageDist'">
              <set_value name="$oEntity.$UFO.$mEngageDist" exact="$oValue" />
            </do_elseif>
          </do_all>

          <!-- If the entity does not have fleet information at this point, we can deactivate it -->
          <do_if value="not $bHasFleet">
            <set_value name="$oEntity.$UFO.$bDeactivate" exact="true" />
          </do_if>
        </do_all>

        <set_value name="$oCue.$aReturn" exact="[$lEntites]" />
      </actions>
    </cue>

    <!-- 
      Cue to intialize an entity with the UFO state container.
    -->
    <cue name="InitializeEntityState" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$oEntity" exact="event.param.{1}" />
        <do_if value="not $oEntity.$UFO?">
          <debug_text filter="error" text="'Initializing UFO state container for entity \'%1\'...'.[$oEntity.knownname]" chance="100 * (global.$UFO.$iDebugLevel ge 2)" />

          <create_cue_actor name="$oEntity.$UFO" cue="md.LibMJ.DictionaryContainer" />
          <set_value name="$oEntity.$UFO.$lActiveScripts" exact="[]" />
        </do_if>
      </actions>
    </cue>

    <!-- 
      Cue to dispose the UFO state container for an entity.
    -->
    <cue name="DisposeEntityState" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$oEntity" exact="event.param.{1}" />
        <do_if value="$oEntity.$UFO?">
          <debug_text filter="error" text="'Disposing UFO state container for entity \'%1\'...'.[$oEntity.knownname]" chance="100 * (global.$UFO.$iDebugLevel ge 2)" />

          <remove_cue_actor actor="$oEntity.$UFO" cue="md.LibMJ.DictionaryContainer" />
          <remove_value name="$oEntity.$UFO" />
        </do_if>
      </actions>
    </cue>
  </cues>
</mdscript>