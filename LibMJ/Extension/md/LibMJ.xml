<?xml version="1.0" encoding="utf-8"?>
<!-- 
	This file is part of the X Rebirth LibMJ script library.
	
	Author: MadJoker
  
  Last Change:
	Version: V0.0.1
	Date: 20th Apr 2014
  
  X Rebirth version: 1.30
-->
<mdscript name="LibMJ" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../Resources/md.xsd">
  <cues>

    <!-- 
      The cue to initialize LibMJ 
    -->
    <cue name="Initialize" instantiate="false" namespace="this">
      <conditions>
        <check_any>
          <!-- Will fire once on every game load, but not on new game -->
          <event_player_created />
          <!-- Will fire as long as game is less than 20 seconds old -->
          <event_cue_signalled cue="md.Setup.GameStart" />
        </check_any>
      </conditions>
      <actions>
        <set_value name="$sName" exact="'LibMJ'" />

        <!-- LibMJ version number -->
        <set_value name="$iMajorVersion" exact="0" />
        <set_value name="$iMinorVersion" exact="0" />
        <set_value name="$iBugfixVersion" exact="1" />
        
        <!-- First, we create our own config container if it doesn't exist -->
        <do_if value="not global.$LibMJ?">
          <create_cue_actor name="$dConfig" cue="md.LibMJ.DictionaryContainer" />
          <set_value name="global.$LibMJ" exact="$dConfig" />
        </do_if>
        <do_else>
          <set_value name="$dConfig" exact="global.$LibMJ" />
        </do_else>
        
        <!-- LibMJ debug level -->
        <set_value name="$dConfig.$iDebugLevel" exact="0" />
        
        <signal_cue_instantly cue="md.LibMJ.GenericInitialization" param="[$sName,$dConfig,$iMajorVersion,$iMinorVersion,$iBugfixVersion]" />

        <!-- Finally, we reset the cue so that it will trigger again on next game load -->
        <reset_cue cue="this" />
      </actions>
    </cue>

    <!-- 
      A generic mod initialization cue.
      It expects parameters in the following form:
      event.param.{1} - name of the mod
      event.param.{2} - the config container of the mod
      event.param.{3} - major version number
      event.param.{4} - minor version number
      event.param.{5} - bugfix version number
    -->
    <cue name="GenericInitialization" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$sName" exact="event.param.{1}" />
        <set_value name="$dConfig" exact="event.param.{2}" />

        <!-- We set the global debug level here (0 - Error; 1 - Info; 2 - Fine; 3 - Finest) -->
        <debug_text text="{99997,9994}.[$sName,$dConfig.$iDebugLevel]" filter="error" chance="100 * ($dConfig.$iDebugLevel ge 1)" />

        <!-- LibMJ version number -->
        <set_value name="$iMajorVersion" exact="event.param.{3}" />
        <set_value name="$iMinorVersion" exact="event.param.{4}" />
        <set_value name="$iBugfixVersion" exact="event.param.{5}" />
        <set_value name="$sVersion" exact="'%1.%2.%3'.[$iMajorVersion,$iMinorVersion,$iBugfixVersion]" />

        <set_value name="$sInstallMessage" exact="@event.param.{6}" />
        <set_value name="$sUpgradeMessage" exact="@event.param.{7}" />
        
        <!-- Check for version -->
        <do_if value="not $dConfig.$iMajorVersion?">
          <!-- Write first time installation message to logbook -->
          <write_to_logbook category="general" text="{99997,9997}.[$sName,$sVersion,'']" />
          
          <!-- If an additional installation message was provided, we notify the user -->
          <set_value name="$sCustomMsgAddendum" exact="''" />
          <do_if value="$sInstallMessage != null">
            <set_value name="$sCustomMsgAddendum" exact="{99997,9992}" />
            <write_to_logbook category="general" text="$sInstallMessage" />
          </do_if>

          <!-- Lastly, we display the message in the center of the screen -->
          <set_value name="$sMsg" exact="{99997,9997}.[$sName,$sVersion,$sCustomMsgAddendum]" />
          <show_help force="true" custom="$sMsg" duration="10s" />
        </do_if>
        <do_elseif value="$dConfig.$iMajorVersion lt $iMajorVersion or $dConfig.$iMinorVersion lt $iMinorVersion or $dConfig.$iBugfixVersion lt $iBugfixVersion">
          <!-- Write upgrade message to logbook -->
          <write_to_logbook category="general" text="{99997,9998}.[$sName,$dConfig.$sVersion,$sVersion,'']" />
          
          <!-- If an additional update message was provided, we notify the user -->
          <set_value name="$sCustomMsgAddendum" exact="''" />
          <do_if value="$sUpgradeMessage != null">
            <set_value name="$sCustomMsgAddendum" exact="{99997,9992}" />
            <write_to_logbook category="general" text="$sUpgradeMessage" />
          </do_if>
          
          <!-- Lastly, we display the message in the center of the screen -->
          <set_value name="$sMsg" exact="{99997,9998}.[$sName,$dConfig.$sVersion,$sVersion,$sCustomMsgAddendum]" />
          <show_help force="true" custom="$sMsg" duration="10s" />
        </do_elseif>
        <do_elseif value="$dConfig.$iMajorVersion gt $iMajorVersion or $dConfig.$iMinorVersion gt $iMinorVersion or $dConfig.$iBugfixVersion gt $iBugfixVersion">
          <!-- Show warning for downgrade -->
          <show_help force="true" custom="{99997,9996}.[$sName,$dConfig.$sVersion,$sVersion]" duration="10s" />
          <write_to_logbook category="general" text="{99997,9996}.[$sName,$dConfig.$sVersion,$sVersion]" />
        </do_elseif>

        <!-- We save the version to the config container -->
        <set_value name="$dConfig.$iMajorVersion" exact="$iMajorVersion" />
        <set_value name="$dConfig.$iMinorVersion" exact="$iMinorVersion" />
        <set_value name="$dConfig.$iBugfixVersion" exact="$iBugfixVersion" />
        <set_value name="$dConfig.$sVersion" exact="$sVersion" />

        <write_to_logbook category="general" text="{99997,9993}.[$sName,$dConfig.$sVersion]" chance="100 * ($dConfig.$iDebugLevel ge 1)" />
        <show_help force="true" custom="{99997,9993}.[$sName,$dConfig.$sVersion]" chance="100 * ($dConfig.$iDebugLevel ge 1)" />
        
        <!-- Finally, we reset the cue for clean-up -->
        <reset_cue cue="this" />
      </actions>
    </cue>

    <!--
      Generic cue to handle uninstallation of mods.
    -->
    <cue name="GenericUninstall" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$sName" exact="event.param.{1}" />
        <set_value name="$dConfig" exact="event.param.{2}" />
        <set_value name="$iMajorVersion" exact="$dConfig.$iMajorVersion" />
        <set_value name="$iMinorVersion" exact="$dConfig.$iMinorVersion" />
        <set_value name="$iBugfixVersion" exact="$dConfig.$iBugfixVersion" />
        <set_value name="$sVersion" exact="'%1.%2.%3'.[$iMajorVersion,$iMinorVersion,$iBugfixVersion]" />

        <set_value name="$sUninstallMessage" exact="@event.param.{3}" />
        
        <!-- Write uninstallation message to logbook -->
        <write_to_logbook category="general" text="{99997,9995}.[$sName,$sVersion,'']" />

        <!-- If an additional installation message was provided, we notify the user -->
        <set_value name="$sCustomMsgAddendum" exact="''" />
        <do_if value="$sUninstallMessage != null">
          <set_value name="$sCustomMsgAddendum" exact="{99997,9992}" />
          <write_to_logbook category="general" text="$sInstallMessage" />
        </do_if>

        <!-- Lastly, we display the message in the center of the screen -->
        <set_value name="$sMsg" exact="{99997,9995}.[$sName,$sVersion,$sCustomMsgAddendum]" />
        <show_help force="true" custom="$sMsg" duration="10s" />
      </actions>
    </cue>
    
    <!-- 
		  Generic dialog to iterate over a list of items. Always 3 items will be 
		  shown at once on the left, while on the right there are options for
		  (More...), (Back), and (Close).
		
		  @param
		  param2.{1}: object - if list, then items to iterate over; if not list, then
                  provide param2.{6} to extract list from object
		  param2.{2}: integer - current offset to start the iteration at
		  param2.{3}: cue - library to add the conversation option; this is
                  necessary since using a string for "section" does not work.
                  It will be given a parameter list containing:
                  {1} - current item, {2} - label, {3} - choiceparam, {4} - baseparam;
                  the library may return a bool to indicate whether the items was
                  successfully added
		  param2.{4}: object - parameter passed to the param2.{3} library function
		  param2.{5}: cue - (optional) the cue used to compute the item label; 
                  if no cue is provided the script assumes the item has a 
                  knownname or name property
	  -->
    <cue name="SectionHandlerGenericListIteration" instantiate="false" namespace="this">
      <conditions>
        <check_any>
          <event_conversation_next_section section="gLibMJ_GenericListIteration" />
          <event_conversation_returned_to_section section="gLibMJ_GenericListIteration" />
        </check_any>
      </conditions>
      <actions>
        <add_conversation_view view="facenormal" />
        <!-- We extract the parameters -->
        <set_value name="$lItems" exact="event.param2.{1}"/>
        <set_value name="$iOffset" exact="event.param2.{2}" />
        <set_value name="$oLibForMenuOption" exact="event.param2.{3}" />
        <set_value name="$oMiscParam" exact="event.param2.{4}" />
        <do_if value="event.param2.count &gt; 4">
          <set_value name="$oCueForLabel" exact="event.param2.{5}" />
        </do_if>
        <show_help force="true" custom="'Opening generic dialog for %1 items.\nStarting at offset %2.\nLib for menu option: %3\nMisc params: %4'.[$lItems.count,$iOffset,$oLibForMenuOption,$oMiscParam]" chance="0"/>

        <set_value name="$iCounterTarget" exact="4" />
        <!-- Beginning at the offset, we iterate over the actors -->
        <do_all exact="$lItems.count - $iOffset" counter="$iCounter">

          <!-- We only have space for thre entries on the left -->
          <do_if value="$iCounter &lt; $iCounterTarget">
            <set_value name="$oItem" exact="$lItems.{$iCounter + $iOffset}" />

            <!-- we compute the label for the item -->
            <do_if value="$oCueForLabel?">
              <!-- if a cue was provided -->
              <signal_cue_instantly cue="$oCueForLabel" param="[this,$oItem,$iCounter + $iOffset]" />
              <set_value name="$sLabel" exact="$aReturn.{1}" />
            </do_if>

            <!-- if no cue was provided, we determine whether the item has a knownname property -->
            <do_elseif value="$oItem.knownname?">
              <set_value name="$sLabel" exact="$oItem.knownname" />
            </do_elseif>

            <!-- if no cue was provided and no knownname exists, we assume the item has a name property -->
            <do_else>
              <set_value name="$sLabel" exact="@$oItem.name" />
            </do_else>

            <!-- finally we create the choice by calling the provided library -->
            <set_value name="$aParam" exact="[$oItem,$sLabel,$oMiscParam,event.param2]"/>
            <remove_value name="$aReturn" />
            <include_actions ref="$oLibForMenuOption" />

            <!-- we check whether the option was successfully added -->
            <do_if value="$aReturn?">
              <do_if value="not $aReturn.{1}">
                <!-- if not successful, we have to rewind the counter, and increase the offset -->
                <set_value name="$iCounterTarget" operation="add" />
              </do_if>
            </do_if>
          </do_if>

          <!-- If we have too many items, we need to show the (More...) button -->
          <do_elseif value="$iCounter == $iCounterTarget and ($iOffset + $iCounter - 1) &lt; $lItems.count">
            <set_value name="$lParam" exact="event.param2.clone" />

            <!-- We adjust the offset for the three items we have shown on this page, and pass it to ourselves. We also set the baseparam so that we can return to the right state -->
            <set_value name="$lParam.{2}" exact="$iOffset + $iCounter - 1" />
            <add_player_choice_sub text="'(%1)'.[{1002,12025}]" position="top_right" section="gLibMJ_GenericListIteration" baseparam="event.param2" choiceparam="$lParam" />
          </do_elseif>
        </do_all>

        <!-- Lastly, we add the (Back) and (Close) buttons -->
        <add_player_choice_return text="'(%1)'.[{1001,2669}]" position="right" />
        <add_player_choice text="'(%1)'.[{1001,2670}]" position="bottom_right" section="gLibMJ_ExitConversation" />

        <!-- We also reset this cue to prevent any state from being left over -->
        <reset_cue cue="this" />
      </actions>
    </cue>

    <!-- 
		  Cue to exit conversations.
	  -->
    <cue name="SectionHandlerExitConversation" instantiate="true" namespace="this">
      <conditions>
        <event_conversation_next_section sectionprefix="gLibMJ_ExitConversation" />
      </conditions>
      <actions>
        <cancel_conversation />
      </actions>
    </cue>
        
    <!--
      Cue to create dictionary for a given entity. Dictionaries are represented
      by creating a virtual actor, using its blackboard to store the values.
    -->
    <cue name="DictionaryFactory" instantiate="true" namespace="this">
      <conditions>
        <event_object_signalled object="player.primaryship" param="'LibMJ_CreateDictionary'" />
      </conditions>
      <actions>
        <set_value name="$oEntity" exact="event.param2" />
        <debug_text text="'Creating dictionary for entity \'%1\'...'.[$oEntity.knownname]" filter="error" chance="100 * (global.$LibMJ.$iDebugLevel ge 3)" />

        <create_cue_actor name="$dDict" cue="DictionaryContainer" />

        <!-- We set the result -->
        <set_value name="$oEntity.$dLibMJ_CreateDictionaryResult" exact="$dDict" />
      </actions>
    </cue>

    <!--
      Cue to dispose a given dictionary/virtual actor.
    -->
    <cue name="DictionaryDisposer" instantiate="true" namespace="this">
      <conditions>
        <event_object_signalled object="player.primaryship" param="'LibMJ_DisposeDictionary'" />
      </conditions>
      <actions>
        <set_value name="$dDict" exact="event.param2" />
        <debug_text text="'Disposing dictionary/virtual actor \'%1\'...'.[$dDict.knownname]" filter="error" chance="100 * (global.$LibMJ.$iDebugLevel ge 3)" />

        <remove_cue_actor cue="DictionaryContainer" actor="$dDict" />
      </actions>
    </cue>

    <!--
      This cue is responsible for storing all created dictionaries globally.
    -->
    <cue name="DictionaryContainer" instantiate="false" namespace="static">
      <conditions>
        <check_any>
          <!-- Will fire once on every game load, but not on new game -->
          <event_player_created />
          <!-- Will fire as long as game is less than 20 seconds old -->
          <event_cue_signalled cue="md.Setup.GameStart" />
        </check_any>
      </conditions>
    </cue>
  </cues>
</mdscript>